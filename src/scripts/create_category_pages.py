import os
import re
import json
import glob
from collections import defaultdict
import codecs

def extract_game_info(file_path):
    """Extract game information from HTML file."""
    try:
        with codecs.open(file_path, 'r', encoding='utf-8-sig') as file:
            content = file.read()
            
            # Extract title
            title_match = re.search(r'<title>(.*?)</title>', content)
            title = title_match.group(1).replace(' - Sonice Games', '') if title_match else "Êú™Áü•Ê∏∏Êàè"
            
            # Extract slug from filename
            slug = os.path.basename(file_path).replace('.html', '')
            
            # Extract image URL
            image_match = re.search(r'<meta property="og:image" content="(.*?)"', content)
            image_url = image_match.group(1) if image_match else "/assets/images/default-game.jpg"
            
            # Extract description
            desc_match = re.search(r'<meta name="description" content="(.*?)"', content)
            description = desc_match.group(1) if desc_match else ""
            
            # Extract categories
            categories = []
            category_section = re.search(r'<div class="game-categories">(.*?)</div>', content, re.DOTALL)
            if category_section:
                category_tags = re.findall(r'<span class="category-badge">(.*?)</span>', category_section.group(1))
                categories = [cat.strip() for cat in category_tags if cat.strip()]
            
            # If no categories found, try alternative method
            if not categories:
                categories_match = re.search(r'<meta property="article:section" content="(.*?)"', content)
                if categories_match:
                    categories = [cat.strip() for cat in categories_match.group(1).split(',')]
            
            # Ensure we have at least one category
            if not categories:
                categories = ["ÂÖ∂‰ªñ"]
            
            return {
                "title": title,
                "slug": slug,
                "image": image_url,
                "description": description,
                "categories": categories,
                "url": f"/games/{slug}.html"
            }
    except Exception as e:
        print(f"Error extracting info from {file_path}: {e}")
        return None

def get_category_icon(category):
    """Return emoji icon for the category."""
    icon_map = {
        "Âä®‰Ωú": "üèÉ",
        "ÂÜíÈô©": "üß≠",
        "Ë°óÊú∫": "üïπÔ∏è",
        "‰ºëÈó≤": "üéÆ",
        "Âç°Áâå": "üÉè",
        "ÁªèÂÖ∏": "üéØ",
        "ÂàõÊÑè": "üí°",
        "Èò≤Âæ°": "üõ°Ô∏è",
        "È©æÈ©∂": "üöó",
        "ÊïôËÇ≤": "üìö",
        "Ê†ºÊñó": "üëä",
        "ÊÅêÊÄñ": "üëª",
        "Â§ö‰∫∫": "üë•",
        "Âπ≥Âè∞": "üèÉ‚Äç‚ôÇÔ∏è",
        "ÁõäÊô∫": "üß©",
        "ËµõËΩ¶": "üèéÔ∏è",
        "ËßíËâ≤ÊâÆÊºî": "üßô",
        "Â∞ÑÂáª": "üî´",
        "Ê®°Êãü": "üéõÔ∏è",
        "ËøêÂä®": "‚öΩ",
        "Á≠ñÁï•": "‚ôüÔ∏è",
        "ÊñáÂ≠ó": "üìù",
        "3D": "üé≤",
        "HTML5": "üåê",
        "IO": "‚öîÔ∏è",
        "È´òÂàÜ": "üèÜ",
        "Âçï‰∫∫": "üë§",
        "‰∫å‰∫∫": "üë´",
        "Áâ©ÁêÜ": "‚öñÔ∏è",
        "ÂÉèÁ¥†": "üéÆ",
        "Ë∑ëÈÖ∑": "üèÉ‚Äç‚ôÄÔ∏è",
        "ÊäÄÂ∑ß": "üéØ",
        "Ëß£Ë∞ú": "üîç",
        "ÁÇπÂáª": "üëÜ",
        "ÊïèÊç∑": "‚ö°",
        "ÂÑøÁ´•": "üë∂",
        "Â•≥Áîü": "üëß",
        "Áî∑Áîü": "üë¶",
    }
    return icon_map.get(category, "üéÆ")

def get_category_description(category):
    """Return description for the category."""
    description_map = {
        "Âä®‰Ωú": "Âø´ËäÇÂ•èÁöÑÂä®‰ΩúÊ∏∏ÊàèÔºåËÄÉÈ™å‰Ω†ÁöÑÂèçÂ∫îÈÄüÂ∫¶ÂíåÊìç‰ΩúÊäÄÂ∑ß„ÄÇ",
        "ÂÜíÈô©": "Êé¢Á¥¢Êú™Áü•‰∏ñÁïåÔºåÂÆåÊàêÂêÑÁßç‰ªªÂä°ÁöÑÂÜíÈô©Ê∏∏Êàè„ÄÇ",
        "Ë°óÊú∫": "ÁªèÂÖ∏Ë°óÊú∫È£éÊ†ºÁöÑÊ∏∏ÊàèÔºåÈáçÁé∞‰º†ÁªüÊ∏∏ÊàèÂéÖÁöÑÊ¨¢‰πêÊó∂ÂÖâ„ÄÇ",
        "‰ºëÈó≤": "ÁÆÄÂçïÊòì‰∏äÊâãÁöÑ‰ºëÈó≤Ê∏∏ÊàèÔºåÈÄÇÂêàÊâÄÊúâÂπ¥ÈæÑÊÆµÁöÑÁé©ÂÆ∂„ÄÇ",
        "Âç°Áâå": "ÂêÑÁ±ªÂç°ÁâåÊî∂ÈõÜ‰∏éÂØπÊàòÊ∏∏ÊàèÔºåËÄÉÈ™åÁ≠ñÁï•ÂíåËøêÊ∞î„ÄÇ",
        "ÁªèÂÖ∏": "Áªè‰πÖ‰∏çË°∞ÁöÑÁªèÂÖ∏Ê∏∏ÊàèÔºåË∂ÖË∂äÊó∂Èó¥ÁöÑÁªèÂÖ∏Áé©Ê≥ï„ÄÇ",
        "ÂàõÊÑè": "ÂÖÖÊª°ÂàõÊÑèÂíåÁã¨ÁâπÁé©Ê≥ïÁöÑÊ∏∏ÊàèÔºåÂ∏¶Êù•ÂÖ®Êñ∞Ê∏∏Êàè‰ΩìÈ™å„ÄÇ",
        "Èò≤Âæ°": "Âª∫ÈÄ†Èò≤Âæ°Â∑•‰∫ãÔºåÈòªÊ≠¢Êïå‰∫∫ÂÖ•‰æµÁöÑÁ≠ñÁï•Ê∏∏Êàè„ÄÇ",
        "È©æÈ©∂": "È©æÈ©∂ÂêÑÁßç‰∫§ÈÄöÂ∑•ÂÖ∑ÁöÑÊ®°ÊãüÊ∏∏ÊàèÔºå‰ΩìÈ™åÈ©æÈ©∂‰πêË∂£„ÄÇ",
        "ÊïôËÇ≤": "ÂØìÊïô‰∫é‰πêÁöÑÊïôËÇ≤Á±ªÊ∏∏ÊàèÔºåËæπÁé©ËæπÂ≠¶‰π†„ÄÇ",
        "Ê†ºÊñó": "ÂêÑÁ±ªÊ†ºÊñóÂØπÊàòÊ∏∏ÊàèÔºåÂ±ïÁ§∫‰Ω†ÁöÑÊ†ºÊñóÊäÄÂ∑ß„ÄÇ",
        "ÊÅêÊÄñ": "ÂÖÖÊª°ÊÅêÊÄñÂÖÉÁ¥†ÁöÑÊ∏∏ÊàèÔºåÊåëÊàò‰Ω†ÁöÑËÉÜÈáè„ÄÇ",
        "Â§ö‰∫∫": "ÂèØ‰∏éÂ§öÂêçÁé©ÂÆ∂‰∏ÄËµ∑Ê∏∏ÊàèÁöÑÂ§ö‰∫∫ËÅîÊú∫Ê∏∏Êàè„ÄÇ",
        "Âπ≥Âè∞": "ÁªèÂÖ∏Âπ≥Âè∞Ë∑≥Ë∑ÉÊ∏∏ÊàèÔºåÊåëÊàòÂêÑÁßçÈöúÁ¢ç„ÄÇ",
        "ÁõäÊô∫": "ÈîªÁÇºÊÄùÁª¥ËÉΩÂäõÁöÑÁõäÊô∫Ëß£Ë∞úÊ∏∏ÊàèÔºåÊåëÊàò‰Ω†ÁöÑÊô∫Âäõ„ÄÇ",
        "ËµõËΩ¶": "Á¥ßÂº†Âà∫ÊøÄÁöÑËµõËΩ¶Ê∏∏ÊàèÔºå‰ΩìÈ™åÈÄüÂ∫¶‰∏éÊøÄÊÉÖ„ÄÇ",
        "ËßíËâ≤ÊâÆÊºî": "ÊâÆÊºîÂêÑÁßçËßíËâ≤Ôºå‰ΩìÈ™å‰∏çÂêå‰∫∫ÁîüÁöÑËßíËâ≤ÊâÆÊºîÊ∏∏Êàè„ÄÇ",
        "Â∞ÑÂáª": "ÊµãËØï‰Ω†ÁöÑÁûÑÂáÜËÉΩÂäõÁöÑÂ∞ÑÂáªÊ∏∏ÊàèÔºåÈîÅÂÆöÁõÆÊ†á„ÄÇ",
        "Ê®°Êãü": "Ê®°ÊãüÁé∞ÂÆûÁîüÊ¥ªÁöÑÂêÑÁßçÂú∫ÊôØÔºå‰ΩìÈ™å‰∏çÂêåËÅå‰∏öÂíåÁîüÊ¥ª„ÄÇ",
        "ËøêÂä®": "ÂêÑÁ±ª‰ΩìËÇ≤ËøêÂä®Ê∏∏ÊàèÔºå‰ΩìÈ™åËøêÂä®ÁöÑ‰πêË∂£„ÄÇ",
        "Á≠ñÁï•": "ÈúÄË¶ÅÊ∑±ÊÄùÁÜüËôëÁöÑÁ≠ñÁï•Ê∏∏ÊàèÔºåËÄÉÈ™å‰Ω†ÁöÑÁ≠ñÁï•ÊÄùÁª¥„ÄÇ",
        "ÊñáÂ≠ó": "‰ª•ÊñáÂ≠ó‰∏∫‰∏ªÁöÑÊ∏∏ÊàèÔºåÂåÖÊã¨ÊñáÂ≠óÂÜíÈô©ÂíåËß£Ë∞ú„ÄÇ",
        "3D": "ÈááÁî®3DÂõæÂΩ¢ÁöÑÊ∏∏ÊàèÔºåÊèê‰æõÊõ¥Âä†ÈÄºÁúüÁöÑÊ∏∏Êàè‰ΩìÈ™å„ÄÇ",
        "HTML5": "‰ΩøÁî®HTML5ÊäÄÊúØÂºÄÂèëÁöÑÊ∏∏ÊàèÔºåÊó†ÈúÄÊèí‰ª∂Âç≥ÂèØÂú®ÊµèËßàÂô®‰∏≠ËøêË°å„ÄÇ",
        "IO": "Â§ö‰∫∫Âú®Á∫øÁ´ûÊäÄÁ±ªIOÊ∏∏ÊàèÔºå‰∏éÂÖ®ÁêÉÁé©ÂÆ∂‰∏ÄËµ∑ÊàòÊñó„ÄÇ",
        "È´òÂàÜ": "ÊåëÊàòÈ´òÂàÜÁöÑÊ∏∏ÊàèÔºåÁúãÁúã‰Ω†ËÉΩÂê¶Áôª‰∏äÊéíË°åÊ¶ú„ÄÇ",
        "Âçï‰∫∫": "‰∏ì‰∏∫Âçï‰∫∫Ê∏∏ÊàèËÆæËÆ°ÁöÑÊ∏∏ÊàèÔºåÁã¨Ëá™Êé¢Á¥¢Ê∏∏Êàè‰∏ñÁïå„ÄÇ",
        "‰∫å‰∫∫": "ÈÄÇÂêà‰∏§‰∏™‰∫∫‰∏ÄËµ∑Áé©ÁöÑÊ∏∏ÊàèÔºå‰∏éÊúãÂèã‰∏ÄËµ∑‰∫´ÂèóÊ∏∏Êàè‰πêË∂£„ÄÇ",
        "Áâ©ÁêÜ": "Âü∫‰∫éÁâ©ÁêÜÂºïÊìéÁöÑÊ∏∏ÊàèÔºåÂÖ∑ÊúâÁúüÂÆûÁâ©ÁêÜÊïàÊûú„ÄÇ",
        "ÂÉèÁ¥†": "ÈááÁî®ÂÉèÁ¥†Ëâ∫ÊúØÈ£éÊ†ºÁöÑÂ§çÂè§Ê∏∏ÊàèÔºåÊÄÄÊóßÁªèÂÖ∏„ÄÇ",
        "Ë∑ëÈÖ∑": "Âø´ÈÄüÂ•îË∑ëË∑≥Ë∑ÉÁöÑË∑ëÈÖ∑Ê∏∏ÊàèÔºåËÄÉÈ™åÂèçÂ∫îÂíåÊäÄÂ∑ß„ÄÇ",
        "ÊäÄÂ∑ß": "ÈúÄË¶ÅÁâπÂÆöÊäÄÂ∑ßÁöÑÊ∏∏ÊàèÔºåÁ£®ÁªÉ‰Ω†ÁöÑÊ∏∏ÊàèËÉΩÂäõ„ÄÇ",
        "Ëß£Ë∞ú": "ÂêÑÁßçËß£Ë∞úÊ∏∏ÊàèÔºåÊåëÊàò‰Ω†ÁöÑÈÄªËæëÊÄùÁª¥ËÉΩÂäõ„ÄÇ",
        "ÁÇπÂáª": "‰ª•ÁÇπÂáª‰∏∫‰∏ªË¶ÅÊìç‰ΩúÁöÑÊ∏∏ÊàèÔºåÁÆÄÂçïÊòì‰∏äÊâã„ÄÇ",
        "ÊïèÊç∑": "ËÄÉÈ™åÂèçÂ∫îÈÄüÂ∫¶ÁöÑÊïèÊç∑Ê∏∏ÊàèÔºåÂø´ÈÄüÂ∫îÂØπÂêÑÁßçÊåëÊàò„ÄÇ",
        "ÂÑøÁ´•": "‰∏ì‰∏∫ÂÑøÁ´•ËÆæËÆ°ÁöÑÊ∏∏ÊàèÔºåÂÜÖÂÆπÂÅ•Â∫∑ÊúâË∂£„ÄÇ",
        "Â•≥Áîü": "ÈíàÂØπÂ•≥ÁîüÂñúÂ•ΩËÆæËÆ°ÁöÑÊ∏∏ÊàèÔºåÂÜÖÂÆπ‰∏∞ÂØåÂ§öÂΩ©„ÄÇ",
        "Áî∑Áîü": "ÈÄÇÂêàÁî∑ÁîüÂè£Âë≥ÁöÑÊ∏∏ÊàèÔºåÂÖÖÊª°ÊåëÊàòÂíåÂà∫ÊøÄ„ÄÇ",
    }
    return description_map.get(category, f"Êù•Áé©ÊúÄÂ•ΩÁöÑ{category}Ê∏∏ÊàèÔºåÂÖçË¥πÂú®Á∫ø‰ΩìÈ™åÂêÑÁßçÁ≤æÂΩ©{category}Ê∏∏Êàè„ÄÇ")

def slugify(text):
    """Convert text to URL-friendly slug."""
    # Simple implementation - replace spaces with hyphens and lowercase
    slug = re.sub(r'[^\w\s-]', '', text.lower())
    slug = re.sub(r'[\s-]+', '-', slug)
    return slug

def main():
    # Ensure output directory exists
    output_dir = "category"
    os.makedirs(output_dir, exist_ok=True)
    
    # Load template
    try:
        with codecs.open("src/templates/category-template.html", "r", encoding="utf-8-sig") as file:
            template = file.read()
    except FileNotFoundError:
        print("Template file not found.")
        return
    
    # Find all game HTML files
    game_files = []
    for pattern in ["games/*.html", "pages/games/*.html"]:
        game_files.extend(glob.glob(pattern))
    
    print(f"Found {len(game_files)} game files")
    
    # Collect games by category
    categories = defaultdict(list)
    games_by_slug = {}
    
    for file_path in game_files:
        game_info = extract_game_info(file_path)
        if game_info:
            games_by_slug[game_info["slug"]] = game_info
            for category in game_info["categories"]:
                categories[category].append(game_info)
    
    # Generate category pages
    success_count = 0
    error_count = 0
    category_data = {"categories": {}}
    
    for category, games in categories.items():
        try:
            category_id = slugify(category)
            category_icon = get_category_icon(category)
            category_description = get_category_description(category)
            
            # Sort games by title
            games.sort(key=lambda x: x["title"])
            
            # Create page content
            page_content = template
            page_content = page_content.replace("{{CATEGORY_NAME}}", category)
            page_content = page_content.replace("{{CATEGORY_ID}}", category_id)
            page_content = page_content.replace("{{CATEGORY_ICON}}", category_icon)
            page_content = page_content.replace("{{CATEGORY_DESCRIPTION}}", category_description)
            
            # Handle games list using Jinja2-style template
            games_html = ""
            for game in games:
                game_categories_html = ""
                for game_category in game["categories"]:
                    game_categories_html += f'<span class="category-badge">{game_category}</span>'
                
                games_html += f'''
                <div class="game-card">
                    <a href="{game['url']}" class="game-link">
                        <div class="game-image">
                            <img src="{game['image']}" alt="{game['title']}">
                            <div class="play-button">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <polygon points="5 3 19 12 5 21 5 3"></polygon>
                                </svg>
                            </div>
                        </div>
                        <div class="game-info">
                            <h3 class="game-title">{game['title']}</h3>
                            <div class="game-categories">
                                {game_categories_html}
                            </div>
                        </div>
                    </a>
                </div>
                '''
            
            # Replace the Jinja2 loop with our generated HTML
            page_content = re.sub(
                r'{% for game in GAMES %}.*?{% endfor %}',
                games_html,
                page_content,
                flags=re.DOTALL
            )
            
            # Write the category page
            output_path = os.path.join(output_dir, f"{category_id}.html")
            with codecs.open(output_path, "w", encoding="utf-8") as file:
                file.write(page_content)
            
            # Add to category data
            category_data["categories"][category] = {
                "id": category_id,
                "name": category,
                "icon": category_icon,
                "description": category_description,
                "games": [game["slug"] for game in games],
                "url": f"/category/{category_id}.html"
            }
            
            success_count += 1
            print(f"Created category page: {output_path} with {len(games)} games")
        
        except Exception as e:
            print(f"Error creating category page for {category}: {e}")
            error_count += 1
    
    # Save category data
    try:
        with open("data/categories.json", "w", encoding="utf-8") as file:
            json.dump(category_data, file, ensure_ascii=False, indent=2)
        print(f"Category data saved to data/categories.json")
    except Exception as e:
        print(f"Error saving category data: {e}")
    
    print(f"\nCategory page generation completed:")
    print(f"Success: {success_count}")
    print(f"Errors: {error_count}")

if __name__ == "__main__":
    main() 